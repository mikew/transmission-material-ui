{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Redux Class Component": {
    "scope": "typescriptreact",
    "prefix": "reactreduxclass",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "import { AppDispatchProps, RootState } from '@src/redux/types'",
      "",
      "class ${1:MyComponent} extends React.PureComponent<ReturnType<typeof mapState> & AppDispatchProps> {",
      "  render() {",
      "    return (",
      "      <div>$2</div>",
      "    )",
      "  }",
      "}",
      "",
      "const mapState = (state: RootState) => ({",
      "  $3",
      "})",
      "",
      "export default connect(mapState)($1)",
      ""
    ],
    "description": "Redux Class Component"
  },
  "Redux Functional Component": {
    "scope": "typescriptreact",
    "prefix": "reactreduxfunctional",
    "body": [
      "import React from 'react'",
      "import { connect } from 'react-redux'",
      "",
      "import { AppDispatchProps, RootState } from '@src/redux/types'",
      "",
      "// tslint:disable-next-line:function-name",
      "function ${1:MyComponent}(props: ReturnType<typeof mapState> & AppDispatchProps) {",
      "  return (",
      "    <div>$2</div>",
      "  )",
      "}",
      "",
      "const mapState = (state: RootState) => ({",
      "  $3  ",
      "})",
      "",
      "export default connect(mapState)($1)",
      ""
    ],
    "description": "Redux Functional Component"
  },
  "Redux mapState": {
    "scope": "typescript,typescriptreact",
    "prefix": "reduxmapstate",
    "body": [
      "import { connect } from 'react-redux'",
      "import { RootState } from '@src/redux/types'",
      "",
      "const mapState = (state: RootState) => ({",
      "  $1",
      "})",
      "// Add this to your props: ${2:& ReturnType<typeof mapState>}",
      "// Decorate your component with: ${3:connect(mapState)()}",
      ""
    ],
    "description": "Redux mapState"
  },
  "Redux createReducer Handler": {
    "scope": "typescript",
    "prefix": "reduxreducerhandler",
    "body": [
      "[constants.${1:action}]: (",
      "  state,",
      "  action: ActionSuccessType<typeof actions.$1>,",
      ") => {",
      "  return {",
      "    ...state,",
      "    $2",
      "  }",
      "},",
      ""
    ],
    "description": "Redux createReducer Handler"
  },
  "material-ui WithStyles": {
    "scope": "typescriptreact",
    "prefix": "muiwithstyles",
    "body": [
      "import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles'",
      "import createStyles from '@material-ui/core/styles/createStyles'",
      "import { Theme } from '@material-ui/core/styles/createMuiTheme'",
      "",
      "const styles = (theme: Theme) =>",
      "  createStyles({",
      "    root: {",
      "      $1",
      "    },",
      "    class1: {",
      "      $2",
      "    },",
      "  })",
      "// Add this to your props: ${3:& WithStyles<typeof styles>}",
      "// Decorate your component with: ${4:withStyles(styles)()}",
      "// Remove `(theme) =>` if you don't need to access the theme",
      ""
    ],
    "description": "material-ui WithStyles"
  }
}
